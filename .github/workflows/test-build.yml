name: Test Build

on:
  workflow_dispatch:
    inputs:
      test_platform:
        description: '测试平台'
        required: true
        default: 'debian11-x64'
        type: choice
        options:
          - 'debian11-x64'
          - 'centos7-x64'
          - 'win11-x64'
      python_version:
        description: 'Python版本'
        required: true
        default: '3.8'
        type: choice
        options:
          - '3.8'
          - '3.9'

jobs:
  test-build:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        include:
          - platform: debian11-x64
            os: ubuntu-22.04
            docker_image: debian:11
            setup_script: debian11_setup.sh
          - platform: centos7-x64
            os: ubuntu-22.04
            docker_image: centos:7
            setup_script: centos7_setup.sh
          - platform: win11-x64
            os: windows-2022
            docker_image: ""
            setup_script: ""
    
    # 只运行选中的平台
    if: ${{ matrix.platform == github.event.inputs.test_platform }}
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Set up Python ${{ github.event.inputs.python_version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ github.event.inputs.python_version }}

    - name: Test Windows Build
      if: matrix.platform == 'win11-x64'
      run: |
        Write-Host "=== 测试 Windows 构建 ==="
        
        # 安装基础依赖
        python -m pip install --upgrade pip
        python -m pip install nuitka wheel setuptools numpy scipy
        
        # 显示系统信息
        Write-Host "=== 系统信息 ==="
        python --version
        python -c "import sys; print(f'Python executable: {sys.executable}')"
        python -c "import platform; print(f'Architecture: {platform.machine()}')"
        
        # 测试 Python 模块编译
        if (Test-Path "scripts/compile_nuitka_cross_platform.py") {
          Write-Host "找到 Nuitka 编译脚本"
          python scripts/compile_nuitka_cross_platform.py || Write-Host "Nuitka 编译失败，但继续"
        } else {
          Write-Host "未找到 Nuitka 编译脚本"
        }
        
        # 创建测试产物
        mkdir -p bin, lib, include
        echo "Windows test binary" > bin/test.exe
        echo "Windows test library" > lib/test.dll
        echo "Windows test header" > include/test.h
        
        Write-Host "=== Windows 构建测试完成 ==="
      shell: pwsh

    - name: Set up Docker Buildx
      if: matrix.platform != 'win11-x64'
      uses: docker/setup-buildx-action@v3

    - name: Test Linux Build with Docker
      if: matrix.platform != 'win11-x64'
      run: |
        echo "=== 测试 Linux 构建: ${{ matrix.platform }} ==="
        
        # 检查 Docker 设置脚本是否存在
        if [ ! -f "docker-local/${{ matrix.setup_script }}" ]; then
          echo "错误: 找不到设置脚本 docker-local/${{ matrix.setup_script }}"
          exit 1
        fi
        
        echo "Docker 镜像: ${{ matrix.docker_image }}"
        echo "设置脚本: ${{ matrix.setup_script }}"
        
        # 创建简化的 Dockerfile
        cat > Dockerfile.test << EOF
        FROM ${{ matrix.docker_image }}
        
        # 复制设置脚本
        COPY docker-local/${{ matrix.setup_script }} /setup.sh
        RUN chmod +x /setup.sh
        
        # 运行设置脚本
        RUN /setup.sh ${{ github.event.inputs.python_version }}
        
        WORKDIR /workspace
        EOF
        
        # 构建测试镜像
        echo "构建 Docker 镜像..."
        docker build -f Dockerfile.test -t bellhop-test:${{ matrix.platform }} .
        
        # 运行测试容器
        echo "运行测试容器..."
        docker run --rm -v $(pwd):/workspace bellhop-test:${{ matrix.platform }} bash -c "
          set -ex
          
          # 显示系统信息
          echo '=== 系统信息 ==='
          uname -a
          cat /etc/os-release || cat /etc/centos-release || echo 'Unknown OS'
          
          echo '=== GLIBC 版本 ==='
          ldd --version | head -1
          
          echo '=== Python 信息 ==='
          python --version
          python -c 'import sys; print(f\"Python executable: {sys.executable}\")'
          
          # 测试 Python 包
          python -c 'import numpy; print(f\"NumPy: {numpy.__version__}\")'
          python -c 'import nuitka; print(f\"Nuitka: {nuitka.__version__}\")' || echo 'Nuitka 导入失败'
          
          # 激活编译环境（CentOS 7 需要）
          if [ -f /opt/rh/devtoolset-7/enable ]; then
            source /opt/rh/devtoolset-7/enable
            echo '激活 devtoolset-7'
          fi
          
          # 检查编译工具
          which gcc || echo 'gcc 未找到'
          which cmake || echo 'cmake 未找到'
          
          # 创建测试产物
          mkdir -p bin lib include
          echo 'Linux test binary' > bin/test
          echo 'Linux test library' > lib/test.so
          echo 'Linux test header' > include/test.h
          
          echo '=== Linux 构建测试完成 ==='
        "

    - name: Upload test artifacts
      uses: actions/upload-artifact@v4
      with:
        name: test-${{ matrix.platform }}-python${{ github.event.inputs.python_version }}
        path: |
          bin/
          lib/
          include/
        retention-days: 7

    - name: Create test summary
      run: |
        echo "# 🧪 测试构建完成" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "- **平台**: ${{ matrix.platform }}" >> $GITHUB_STEP_SUMMARY
        echo "- **Python 版本**: ${{ github.event.inputs.python_version }}" >> $GITHUB_STEP_SUMMARY
        echo "- **运行器**: ${{ matrix.os }}" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "测试构建已完成，请检查构建日志和下载测试产物。" >> $GITHUB_STEP_SUMMARY
