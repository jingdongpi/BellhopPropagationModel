name: Build and Test

on:
  push:
    branches: [ main, master, develop ]
  pull_request:
    branches: [ main, master, develop ]
  workflow_dispatch:  # 允许手动触发

jobs:
  build:
    name: Build on ${{ matrix.platform }}-${{ matrix.arch }} (Python ${{ matrix.python-version }})
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        include:
          # Windows x86-64
          - os: windows-2019
            python-version: '3.8'
            platform: windows
            arch: x86_64
          - os: windows-2019
            python-version: '3.10'
            platform: windows
            arch: x86_64
          - os: windows-2019
            python-version: '3.12'
            platform: windows
            arch: x86_64
          
          # Linux x86-64
          - os: ubuntu-22.04
            python-version: '3.8'
            platform: linux
            arch: x86_64
          - os: ubuntu-22.04
            python-version: '3.10'
            platform: linux
            arch: x86_64
          - os: ubuntu-22.04
            python-version: '3.12'
            platform: linux
            arch: x86_64
        
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v5
      with:
        python-version: ${{ matrix.python-version }}
        
    - name: Install system dependencies (Linux)
      if: matrix.platform == 'linux'
      run: |
        sudo apt-get update
        sudo apt-get install -y \
          build-essential \
          cmake \
          gcc \
          g++ \
          make \
          python3-dev \
          python3-pip \
          libpython3-dev \
          pkg-config
          
    - name: Install system dependencies (Windows)
      if: matrix.platform == 'windows'
      run: |
        # Install Visual Studio Build Tools and CMake
        choco install cmake --installargs 'ADD_CMAKE_TO_PATH=System'
        choco install visualstudio2019buildtools --package-parameters "--add Microsoft.VisualStudio.Workload.VCTools"
        refreshenv
          
    - name: Install Python dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        
    - name: Display system info (Linux)
      if: matrix.platform == 'linux'
      run: |
        echo "=== System Information ==="
        uname -a
        echo "=== Python Information ==="
        python --version
        python -c "import sys; print(f'Python executable: {sys.executable}')"
        python -c "import numpy; print(f'NumPy version: {numpy.__version__}')"
        python -c "import scipy; print(f'SciPy version: {scipy.__version__}')"
        echo "=== CMake Information ==="
        cmake --version
        echo "=== GCC Information ==="
        gcc --version
        
    - name: Display system info (Windows)
      if: matrix.platform == 'windows'
      run: |
        echo "=== System Information ==="
        echo "Windows $(Get-ComputerInfo | Select-Object WindowsVersion)"
        echo "=== Python Information ==="
        python --version
        python -c "import sys; print(f'Python executable: {sys.executable}')"
        python -c "import numpy; print(f'NumPy version: {numpy.__version__}')"
        python -c "import scipy; print(f'SciPy version: {scipy.__version__}')"
        echo "=== CMake Information ==="
        cmake --version
    - name: Configure CMake (Linux)
      if: matrix.platform == 'linux'
      run: |
        mkdir -p build
        cd build
        cmake .. \
          -DBUILD_EXECUTABLE=ON \
          -DBUILD_SHARED_LIBS=ON \
          -DCMAKE_BUILD_TYPE=Release \
          -DCMAKE_VERBOSE_MAKEFILE=ON
          
    - name: Configure CMake (Windows)
      if: matrix.platform == 'windows'
      run: |
        mkdir build
        cd build
        cmake .. `
          -DBUILD_EXECUTABLE=ON `
          -DBUILD_SHARED_LIBS=ON `
          -DCMAKE_BUILD_TYPE=Release `
          -DCMAKE_VERBOSE_MAKEFILE=ON
      shell: pwsh
          
    - name: Build project (Linux)
      if: matrix.platform == 'linux'
      run: |
        cd build
        make -j$(nproc)
        
    - name: Build project (Windows)
      if: matrix.platform == 'windows'
      run: |
        cd build
        cmake --build . --config Release --parallel
      shell: pwsh
    - name: Verify build outputs (Linux)
      if: matrix.platform == 'linux'
      run: |
        echo "=== Checking build outputs ==="
        ls -la bin/ || echo "bin/ directory not found"
        ls -la lib/ || echo "lib/ directory not found"
        
        if [ -f "bin/BellhopPropagationModel" ]; then
          echo "✓ Executable found: bin/BellhopPropagationModel"
          file bin/BellhopPropagationModel
        else
          echo "✗ Executable not found"
          exit 1
        fi
        
        if [ -f "lib/libBellhopPropagationModel.so" ]; then
          echo "✓ Library found: lib/libBellhopPropagationModel.so"
          file lib/libBellhopPropagationModel.so
          ldd lib/libBellhopPropagationModel.so || echo "Could not check library dependencies"
        else
          echo "✗ Library not found"
          exit 1
        fi
        
    - name: Verify build outputs (Windows)
      if: matrix.platform == 'windows'
      run: |
        echo "=== Checking build outputs ==="
        Get-ChildItem bin -ErrorAction SilentlyContinue
        Get-ChildItem lib -ErrorAction SilentlyContinue
        
        if (Test-Path "bin/Release/BellhopPropagationModel.exe") {
          echo "✓ Executable found: bin/Release/BellhopPropagationModel.exe"
        } elseif (Test-Path "bin/BellhopPropagationModel.exe") {
          echo "✓ Executable found: bin/BellhopPropagationModel.exe"
        } else {
          echo "✗ Executable not found"
          exit 1
        }
        
        if (Test-Path "lib/Release/BellhopPropagationModel.dll") {
          echo "✓ Library found: lib/Release/BellhopPropagationModel.dll"
        } elseif (Test-Path "lib/BellhopPropagationModel.dll") {
          echo "✓ Library found: lib/BellhopPropagationModel.dll"
        } else {
          echo "✗ Library not found"
          exit 1
        }
      shell: pwsh
        
    - name: Run CI tests (Linux)
      if: matrix.platform == 'linux'
      run: |
        chmod +x ci_test.sh
        ./ci_test.sh
        
    - name: Run CI tests (Windows)
      if: matrix.platform == 'windows'
      run: |
        .\ci_test_windows.ps1
      shell: pwsh
        
    - name: Upload build artifacts (Linux)
      uses: actions/upload-artifact@v4
      if: success() && matrix.platform == 'linux'
      with:
        name: bellhop-build-${{ matrix.platform }}-${{ matrix.arch }}-python${{ matrix.python-version }}
        path: |
          bin/BellhopPropagationModel
          lib/libBellhopPropagationModel.so
          include/
        retention-days: 7
        
    - name: Upload build artifacts (Windows)
      uses: actions/upload-artifact@v4
      if: success() && matrix.platform == 'windows'
      with:
        name: bellhop-build-${{ matrix.platform }}-${{ matrix.arch }}-python${{ matrix.python-version }}
        path: |
          bin/Release/BellhopPropagationModel.exe
          bin/BellhopPropagationModel.exe
          lib/Release/BellhopPropagationModel.dll
          lib/BellhopPropagationModel.dll
          include/
        retention-days: 7
        
    - name: Upload build logs on failure
      uses: actions/upload-artifact@v4
      if: failure()
      with:
        name: build-logs-${{ matrix.platform }}-${{ matrix.arch }}-python${{ matrix.python-version }}
        path: |
          build/CMakeFiles/CMakeOutput.log
          build/CMakeFiles/CMakeError.log
          build/**/*.log
        retention-days: 3
