name: Build and Test

on:
  # 移除自动触发，仅支持手动触发
  workflow_dispatch:
    inputs:
      platform:
        description: '选择构建平台'
        required: true
        default: 'all'
        type: choice
        options:
          - 'all'
          - 'linux'
          - 'windows'
      python_version:
        description: '选择Python版本'
        required: true
        default: 'all'
        type: choice
        options:
          - 'all'
          - '3.8'
          - '3.10'
          - '3.12'
      architecture:
        description: '选择架构'
        required: true
        default: 'x86_64'
        type: choice
        options:
          - 'x86_64'
          - 'x86'

jobs:
  # 决定需要构建哪些任务的作业
  determine-matrix:
    runs-on: ubuntu-latest
    outputs:
      matrix: ${{ steps.set-matrix.outputs.matrix }}
    steps:
      - name: Determine build matrix
        id: set-matrix
        run: |
          # 根据输入参数构建矩阵
          matrix='{"include":[]}'
          
          # 定义所有可能的组合
          platforms=()
          python_versions=()
          architectures=()
          
          # 确定平台
          if [[ "${{ inputs.platform }}" == "all" ]]; then
            platforms=("linux" "windows")
          else
            platforms=("${{ inputs.platform }}")
          fi
          
          # 确定Python版本
          if [[ "${{ inputs.python_version }}" == "all" ]]; then
            python_versions=("3.8" "3.10" "3.12")
          else
            python_versions=("${{ inputs.python_version }}")
          fi
          
          # 确定架构
          architectures=("${{ inputs.architecture }}")
          
          # 生成矩阵组合
          for platform in "${platforms[@]}"; do
            for python_version in "${python_versions[@]}"; do
              for arch in "${architectures[@]}"; do
                if [[ "$platform" == "linux" ]]; then
                  os="ubuntu-22.04"
                else
                  os="windows-2019"
                fi
                
                # 添加到矩阵
                matrix=$(echo "$matrix" | jq --arg os "$os" --arg pv "$python_version" --arg platform "$platform" --arg arch "$arch" \
                  '.include += [{"os": $os, "python-version": $pv, "platform": $platform, "arch": $arch}]')
              done
            done
          done
          
          echo "matrix=$matrix" >> $GITHUB_OUTPUT
          echo "Generated matrix: $matrix"

  build:
    name: Build on ${{ matrix.platform }}-${{ matrix.arch }} (Python ${{ matrix.python-version }})
    runs-on: ${{ matrix.os }}
    needs: determine-matrix
    strategy:
      fail-fast: false
      matrix: ${{fromJson(needs.determine-matrix.outputs.matrix)}}
        
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v5
      with:
        python-version: ${{ matrix.python-version }}
        
    - name: Install system dependencies (Linux)
      if: matrix.platform == 'linux'
      run: |
        sudo apt-get update
        sudo apt-get install -y \
          build-essential \
          cmake \
          gcc \
          g++ \
          make \
          python3-dev \
          python3-pip \
          libpython3-dev \
          pkg-config
          
    - name: Install system dependencies (Windows)
      if: matrix.platform == 'windows'
      run: |
        # 安装 CMake
        echo "Installing CMake..."
        choco install cmake --installargs 'ADD_CMAKE_TO_PATH=System'
        
        # 安装 MinGW-w64 (确保兼容 Nuitka)
        echo "Installing MinGW-w64..."
        if ("${{ matrix.arch }}" -eq "x86") {
          # 32位版本
          choco install mingw --allow-downgrade
        } else {
          # 64位版本
          choco install mingw --allow-downgrade
        }
        
        # 安装 Visual C++ 构建工具（Nuitka 可能需要）
        echo "Installing Visual C++ Build Tools..."
        choco install visualcpp-build-tools --version=14.0.25420.1 --allow-downgrade
        
        # 刷新环境变量
        refreshenv
        
        # 确保编译器在PATH中
        $env:PATH = "C:\tools\mingw64\bin;$env:PATH"
        echo "C:\tools\mingw64\bin" | Out-File -FilePath $env:GITHUB_PATH -Encoding utf8 -Append
        
      shell: pwsh
          
    - name: Install Python dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        # 安装 Nuitka 用于编译 Python 模块
        pip install nuitka
        
    - name: Display system info (Linux)
      if: matrix.platform == 'linux'
      run: |
        echo "=== System Information ==="
        uname -a
        echo "=== Python Information ==="
        python --version
        python -c "import sys; print(f'Python executable: {sys.executable}')"
        python -c "import numpy; print(f'NumPy version: {numpy.__version__}')"
        python -c "import scipy; print(f'SciPy version: {scipy.__version__}')"
        echo "=== CMake Information ==="
        cmake --version
        echo "=== GCC Information ==="
        gcc --version
        
    - name: Display system info (Windows)
      if: matrix.platform == 'windows'
      run: |
        echo "=== System Information ==="
        echo "Windows $(Get-ComputerInfo | Select-Object WindowsVersion)"
        echo "=== Python Information ==="
        python --version
        python -c "import sys; print(f'Python executable: {sys.executable}')"
        python -c "import numpy; print(f'NumPy version: {numpy.__version__}')"
        python -c "import scipy; print(f'SciPy version: {scipy.__version__}')"
        echo "=== CMake Information ==="
        cmake --version
        echo "=== MinGW32 Information ==="
        gcc --version
        g++ --version
        echo "Architecture: ${{ matrix.arch }}"
      shell: pwsh
    - name: Configure CMake (Linux)
      if: matrix.platform == 'linux'
      run: |
        mkdir -p build
        cd build
        cmake .. \
          -DBUILD_EXECUTABLE=ON \
          -DBUILD_SHARED_LIBS=ON \
          -DCMAKE_BUILD_TYPE=Release \
          -DCMAKE_VERBOSE_MAKEFILE=ON
          
    - name: Configure CMake (Windows)
      if: matrix.platform == 'windows'
      run: |
        mkdir build
        cd build
        
        # 设置架构相关的编译器标志
        if ("${{ matrix.arch }}" -eq "x86") {
          $archFlags = "-m32"
          $targetArch = "i686"
        } else {
          $archFlags = "-m64"
          $targetArch = "x86_64"
        }
        
        cmake .. `
          -G "MinGW Makefiles" `
          -DBUILD_EXECUTABLE=ON `
          -DBUILD_SHARED_LIBS=ON `
          -DCMAKE_BUILD_TYPE=Release `
          -DCMAKE_VERBOSE_MAKEFILE=ON `
          -DCMAKE_C_COMPILER="gcc" `
          -DCMAKE_CXX_COMPILER="g++" `
          -DCMAKE_C_FLAGS="$archFlags" `
          -DCMAKE_CXX_FLAGS="$archFlags" `
          -DCMAKE_SYSTEM_PROCESSOR="$targetArch"
      shell: pwsh
          
    - name: Build project (Linux)
      if: matrix.platform == 'linux'
      run: |
        cd build
        make -j$(nproc)
        
    - name: Build project (Windows)
      if: matrix.platform == 'windows'
      run: |
        cd build
        # 使用 make 构建
        make -j4
      shell: pwsh
      
    - name: Compile Python modules (Linux)
      if: matrix.platform == 'linux'
      run: |
        echo "=== 编译 Python 模块 (Linux) ==="
        python3 scripts/compile_nuitka_cross_platform.py
        echo "Python 模块编译完成"
        
    - name: Compile Python modules (Windows)
      if: matrix.platform == 'windows'
      run: |
        echo "=== 编译 Python 模块 (Windows) ==="
        
        # 确保编译器环境正确
        echo "检查编译器..."
        gcc --version
        
        # 设置环境变量
        $env:CC = "gcc"
        $env:CXX = "g++"
        
        # 运行编译脚本
        python scripts/compile_nuitka_cross_platform.py
        echo "Python 模块编译完成"
      shell: pwsh
    - name: Verify build outputs (Linux)
      if: matrix.platform == 'linux'
      run: |
        echo "=== Checking build outputs ==="
        ls -la bin/ || echo "bin/ directory not found"
        ls -la lib/ || echo "lib/ directory not found"
        
        # 检查 CMake 构建的二进制文件
        if [ -f "bin/BellhopPropagationModel" ]; then
          echo "✓ Executable found: bin/BellhopPropagationModel"
          file bin/BellhopPropagationModel
        else
          echo "✗ Executable not found"
          exit 1
        fi
        
        if [ -f "lib/libBellhopPropagationModel.so" ]; then
          echo "✓ Library found: lib/libBellhopPropagationModel.so"
          file lib/libBellhopPropagationModel.so
          ldd lib/libBellhopPropagationModel.so || echo "Could not check library dependencies"
        else
          echo "✗ Library not found"
          exit 1
        fi
        
        # 检查 Python 模块
        echo "=== Checking Python modules ==="
        python_modules=(
          "bellhop.cpython-*-linux-gnu.so"
          "readwrite.cpython-*-linux-gnu.so"
          "env.cpython-*-linux-gnu.so"
          "bellhop_wrapper.cpython-*-linux-gnu.so"
        )
        
        for module_pattern in "${python_modules[@]}"; do
          found_files=(lib/$module_pattern)
          if [ -e "${found_files[0]}" ]; then
            echo "✓ Python module found: ${found_files[0]}"
            file "${found_files[0]}"
          else
            echo "! Python module not found: $module_pattern (may be optional)"
          fi
        done
        
    - name: Verify build outputs (Windows)
      if: matrix.platform == 'windows'
      run: |
        echo "=== Checking build outputs ==="
        Get-ChildItem bin -ErrorAction SilentlyContinue
        Get-ChildItem lib -ErrorAction SilentlyContinue
        
        # MinGW 通常输出到 bin/ 目录
        if (Test-Path "bin/BellhopPropagationModel.exe") {
          echo "✓ Executable found: bin/BellhopPropagationModel.exe"
          echo "File info:"
          Get-ItemProperty "bin/BellhopPropagationModel.exe" | Select-Object Name, Length, LastWriteTime
        } else {
          echo "✗ Executable not found in bin/"
          echo "Looking for executable in other locations..."
          Get-ChildItem -Recurse -Name "*.exe" | Where-Object { $_ -like "*BellhopPropagationModel*" }
          exit 1
        }
        
        # MinGW 输出 .dll 文件而不是 .lib
        if (Test-Path "lib/libBellhopPropagationModel.dll") {
          echo "✓ Library found: lib/libBellhopPropagationModel.dll"
        } elseif (Test-Path "bin/libBellhopPropagationModel.dll") {
          echo "✓ Library found: bin/libBellhopPropagationModel.dll"
        } else {
          echo "✗ Library not found"
          echo "Looking for library in other locations..."
          Get-ChildItem -Recurse -Name "*.dll" | Where-Object { $_ -like "*BellhopPropagationModel*" }
          exit 1
        }
        
        # 检查 Python 模块
        echo "=== Checking Python modules ==="
        $pythonModules = @(
          "bellhop.cp*-win*.pyd",
          "readwrite.cp*-win*.pyd", 
          "env.cp*-win*.pyd",
          "bellhop_wrapper.cp*-win*.pyd"
        )
        
        foreach ($modulePattern in $pythonModules) {
          $foundFiles = Get-ChildItem "lib/$modulePattern" -ErrorAction SilentlyContinue
          if ($foundFiles) {
            echo "✓ Python module found: $($foundFiles[0].Name)"
          } else {
            echo "! Python module not found: $modulePattern (may be optional)"
          }
        }
      shell: pwsh
        
    - name: Run CI tests (Linux)
      if: matrix.platform == 'linux'
      run: |
        chmod +x ci_test.sh
        ./ci_test.sh
        
    - name: Run CI tests (Windows)
      if: matrix.platform == 'windows'
      run: |
        .\ci_test_windows.ps1
      shell: pwsh
        
    - name: Upload build artifacts (Linux)
      uses: actions/upload-artifact@v4
      if: success() && matrix.platform == 'linux'
      with:
        name: bellhop-build-${{ matrix.platform }}-${{ matrix.arch }}-python${{ matrix.python-version }}
        path: |
          bin/BellhopPropagationModel
          lib/libBellhopPropagationModel.so
          lib/*.cpython-*-linux-gnu.so
          include/
        retention-days: 7
        
    - name: Upload build artifacts (Windows)
      uses: actions/upload-artifact@v4
      if: success() && matrix.platform == 'windows'
      with:
        name: bellhop-build-${{ matrix.platform }}-${{ matrix.arch }}-python${{ matrix.python-version }}
        path: |
          bin/BellhopPropagationModel.exe
          bin/libBellhopPropagationModel.dll
          lib/libBellhopPropagationModel.dll
          lib/*.pyd
          include/
        retention-days: 7
        
    - name: Upload build logs on failure
      uses: actions/upload-artifact@v4
      if: failure()
      with:
        name: build-logs-${{ matrix.platform }}-${{ matrix.arch }}-python${{ matrix.python-version }}
        path: |
          build/CMakeFiles/CMakeOutput.log
          build/CMakeFiles/CMakeError.log
          build/**/*.log
        retention-days: 3
