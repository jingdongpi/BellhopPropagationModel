name: Multi-Platform

on:
  workflow_dispatch:
    inputs:
      build_centos7:
        description: '构建 CentOS 7 x86_64'
        type: boolean
        default: true
      build_debian11:
        description: '构建 Debian 11 x86_64'
        type: boolean
        default: true
      build_windows:
        description: '构建 Windows x86_64'
        type: boolean
        default: true
      build_linux_arm64:
        description: '构建 Linux ARM64'
        type: boolean
        default: false
      python_versions:
        description: 'Python 版本 (用逗号分隔)'
        required: false
        default: '3.8,3.9,3.10,3.11,3.12'

jobs:
  generate-matrix:
    runs-on: ubuntu-latest
    outputs:
      matrix: ${{ steps.set-matrix.outputs.matrix }}
    steps:
    - name: Generate build matrix
      id: set-matrix
      run: |
        BUILD_CENTOS7="${{ github.event.inputs.build_centos7 }}"
        BUILD_DEBIAN11="${{ github.event.inputs.build_debian11 }}"
        BUILD_WINDOWS="${{ github.event.inputs.build_windows }}"
        BUILD_LINUX_ARM64="${{ github.event.inputs.build_linux_arm64 }}"
        PYTHON_VERSIONS="${{ github.event.inputs.python_versions }}"
        
        echo "构建配置:"
        echo "CentOS 7: $BUILD_CENTOS7"
        echo "Debian 11: $BUILD_DEBIAN11"
        echo "Windows: $BUILD_WINDOWS"
        echo "Linux ARM64: $BUILD_LINUX_ARM64"
        echo "Python 版本: $PYTHON_VERSIONS"
        
        matrix_include="["
        first=true
        
        # 将 Python 版本字符串转换为数组
        IFS=',' read -ra VERSIONS <<< "$PYTHON_VERSIONS"
        
        # CentOS 7 x86_64
        if [[ "$BUILD_CENTOS7" == "true" ]]; then
          for version in "${VERSIONS[@]}"; do
            version=$(echo "$version" | xargs)
            if [[ "$first" == "false" ]]; then
              matrix_include+=","
            fi
            matrix_include+="{\"platform\":\"centos7-x64\",\"os\":\"ubuntu-latest\",\"python-version\":\"$version\",\"docker_image\":\"centos:7\",\"setup_script\":\"centos7_setup.sh\"}"
            first=false
          done
        fi
        
        # Debian 11 x86_64
        if [[ "$BUILD_DEBIAN11" == "true" ]]; then
          for version in "${VERSIONS[@]}"; do
            version=$(echo "$version" | xargs)
            if [[ "$first" == "false" ]]; then
              matrix_include+=","
            fi
            matrix_include+="{\"platform\":\"debian11-x64\",\"os\":\"ubuntu-latest\",\"python-version\":\"$version\",\"docker_image\":\"debian:11\",\"setup_script\":\"debian11_setup.sh\"}"
            first=false
          done
        fi
        
        # Windows x86_64
        if [[ "$BUILD_WINDOWS" == "true" ]]; then
          for version in "${VERSIONS[@]}"; do
            version=$(echo "$version" | xargs)
            if [[ "$first" == "false" ]]; then
              matrix_include+=","
            fi
            matrix_include+="{\"platform\":\"win11-x64\",\"os\":\"windows-latest\",\"python-version\":\"$version\",\"docker_image\":\"\",\"setup_script\":\"\"}"
            first=false
          done
        fi
        
        # Linux ARM64
        if [[ "$BUILD_LINUX_ARM64" == "true" ]]; then
          for version in "${VERSIONS[@]}"; do
            version=$(echo "$version" | xargs)
            if [[ "$first" == "false" ]]; then
              matrix_include+=","
            fi
            matrix_include+="{\"platform\":\"debian11-arm64\",\"os\":\"ubuntu-22.04-arm\",\"python-version\":\"$version\",\"docker_image\":\"debian:11\",\"setup_script\":\"debian11_arm64_setup.sh\"}"
            first=false
          done
        fi
        
        matrix_include+="]"
        matrix_json="{\"include\":$matrix_include}"
        
        echo "生成的矩阵:"
        echo "$matrix_json" | jq '.' || echo "$matrix_json"
        
        echo "matrix=$matrix_json" >> $GITHUB_OUTPUT

  build:
    needs: generate-matrix
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix: ${{ fromJson(needs.generate-matrix.outputs.matrix) }}
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}

    - name: Build Linux platforms with Docker
      if: matrix.os == 'ubuntu-latest' || matrix.os == 'ubuntu-22.04-arm'
      run: |
        echo "构建平台: ${{ matrix.platform }}"
        echo "Docker镜像: ${{ matrix.docker_image }}"
        echo "Python版本: ${{ matrix.python-version }}"
        
        # 创建简化的构建 Dockerfile
        cat > Dockerfile.build << EOF
        FROM ${{ matrix.docker_image }}
        
        # 复制设置脚本并运行
        COPY docker-local/${{ matrix.setup_script }} /setup.sh
        RUN chmod +x /setup.sh && /setup.sh ${{ matrix.python-version }}
        
        # 设置工作目录
        WORKDIR /workspace
        
        # 复制项目文件
        COPY . .
        
        # 构建项目
        RUN set -ex && \
            echo "=== 系统信息 ===" && \
            uname -a && \
            python --version && \
            echo "=== 开始构建 ===" && \
            if [ -f /opt/rh/devtoolset-7/enable ]; then source /opt/rh/devtoolset-7/enable; fi && \
            mkdir -p build && \
            cd build && \
            cmake .. \
              -DCMAKE_BUILD_TYPE=Release \
              -DBUILD_EXECUTABLE=ON \
              -DBUILD_SHARED_LIBS=ON \
              -DPython3_EXECUTABLE=\$(which python) && \
            make -j\$(nproc) && \
            cd .. && \
            if [ -f scripts/compile_nuitka_cross_platform.py ]; then \
              python scripts/compile_nuitka_cross_platform.py; \
            fi && \
            echo "=== 构建完成 ==="
        EOF
        
        # 构建 Docker 镜像
        docker build -f Dockerfile.build -t build-${{ matrix.platform }} .
        
        # 从容器中复制构建产物
        container_id=$(docker create build-${{ matrix.platform }})
        docker cp $container_id:/workspace/bin ./bin-${{ matrix.platform }} || mkdir -p ./bin-${{ matrix.platform }}
        docker cp $container_id:/workspace/lib ./lib-${{ matrix.platform }} || mkdir -p ./lib-${{ matrix.platform }}
        docker cp $container_id:/workspace/include ./include-${{ matrix.platform }} || mkdir -p ./include-${{ matrix.platform }}
        docker rm $container_id
        
        # 整理构建产物
        mkdir -p build-output
        if [ -d ./bin-${{ matrix.platform }} ]; then mv ./bin-${{ matrix.platform }} build-output/bin; fi
        if [ -d ./lib-${{ matrix.platform }} ]; then mv ./lib-${{ matrix.platform }} build-output/lib; fi
        if [ -d ./include-${{ matrix.platform }} ]; then mv ./include-${{ matrix.platform }} build-output/include; fi

    - name: Build Windows platform
      if: matrix.os == 'windows-latest'
      run: |
        echo "构建 Windows 平台: ${{ matrix.platform }}"
        echo "Python版本: ${{ matrix.python-version }}"
        
        # 安装 Chocolatey（如果未安装）
        if (!(Get-Command choco -ErrorAction SilentlyContinue)) {
          Set-ExecutionPolicy Bypass -Scope Process -Force
          [System.Net.ServicePointManager]::SecurityProtocol = [System.Net.ServicePointManager]::SecurityProtocol -bor 3072
          iex ((New-Object System.Net.WebClient).DownloadString('https://community.chocolatey.org/install.ps1'))
        }
        
        # 安装构建工具
        choco install -y cmake mingw
        
        # 安装 Python 依赖
        python -m pip install --upgrade pip
        python -m pip install nuitka wheel setuptools
        
        # 安装 NumPy 和 SciPy
        if ("${{ matrix.python-version }}" -eq "3.8") {
          python -m pip install "numpy>=1.20.0,<2.0.0" scipy
        } else {
          python -m pip install numpy scipy
        }
        
        # 显示系统信息
        Write-Host "=== 系统信息 ==="
        python --version
        Write-Host "Architecture: $env:PROCESSOR_ARCHITECTURE"
        
        # 创建构建目录
        New-Item -ItemType Directory -Force -Path build
        Set-Location build
        
        # 配置 CMake
        $pythonExe = (Get-Command python).Source
        cmake .. `
          -G "MinGW Makefiles" `
          -DCMAKE_BUILD_TYPE=Release `
          -DBUILD_EXECUTABLE=ON `
          -DBUILD_SHARED_LIBS=ON `
          -DPython3_EXECUTABLE="$pythonExe"
        
        # 编译
        mingw32-make -j4
        
        # 编译 Python 模块
        Set-Location ..
        if (Test-Path "scripts/compile_nuitka_cross_platform.py") {
          python scripts/compile_nuitka_cross_platform.py
        }
        
        # 整理 Windows 构建产物
        New-Item -ItemType Directory -Force -Path build-output
        if (Test-Path "bin") { Move-Item bin build-output/ }
        if (Test-Path "lib") { Move-Item lib build-output/ }
        if (Test-Path "include") { Move-Item include build-output/ }
      shell: pwsh

    - name: Upload build artifacts
      uses: actions/upload-artifact@v4
      with:
        name: bellhop-${{ matrix.platform }}-python${{ matrix.python-version }}
        path: |
          build-output/
        retention-days: 30

    - name: Create build info
      run: |
        cat > build-info.txt << EOF
        ==========================================
        BellhopPropagationModel 构建信息
        ==========================================
        平台: ${{ matrix.platform }}
        操作系统: ${{ matrix.os }}
        Python版本: ${{ matrix.python-version }}
        构建时间: $(date)
        
        兼容性说明:
        - ${{ matrix.platform }}: 适用于对应架构的系统
        - 包含所有必要的运行时库
        - Python 模块已通过 Nuitka 编译
        EOF
      shell: bash

    - name: Upload build info
      uses: actions/upload-artifact@v4
      with:
        name: build-info-${{ matrix.platform }}-python${{ matrix.python-version }}
        path: build-info.txt
