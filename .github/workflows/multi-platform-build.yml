name: Multi-Platform

on:
  workflow_dispatch:
    inputs:
      build_centos7:
        description: '构建 CentOS 7 x86_64'
        type: boolean
        default: true
      build_debian11:
        description: '构建 Debian 11 x86_64'
        type: boolean
        default: true
      build_windows:
        description: '构建 Windows x86_64'
        type: boolean
        default: true
      build_debian11_arm64:
        description: '构建 Debian 11 ARM64'
        type: boolean
        default: false
      build_centos8_arm64:
        description: '构建 CentOS 8 ARM64'
        type: boolean
        default: false
      python_versions:
        description: 'Python 版本 (用逗号分隔)'
        required: false
        default: '3.8,3.9,3.10,3.11,3.12'

jobs:
  generate-matrix:
    runs-on: ubuntu-latest
    outputs:
      matrix: ${{ steps.set-matrix.outputs.matrix }}
    steps:
    - name: Generate build matrix
      id: set-matrix
      run: |
        BUILD_CENTOS7="${{ github.event.inputs.build_centos7 }}"
        BUILD_DEBIAN11="${{ github.event.inputs.build_debian11 }}"
        BUILD_WINDOWS="${{ github.event.inputs.build_windows }}"
        BUILD_DEBIAN11_ARM64="${{ github.event.inputs.build_debian11_arm64 }}"
        BUILD_CENTOS8_ARM64="${{ github.event.inputs.build_centos8_arm64 }}"
        PYTHON_VERSIONS="${{ github.event.inputs.python_versions }}"
        
        echo "构建配置:"
        echo "CentOS 7 x86_64: $BUILD_CENTOS7"
        echo "Debian 11 x86_64: $BUILD_DEBIAN11"
        echo "Windows x86_64: $BUILD_WINDOWS"
        echo "Debian 11 ARM64: $BUILD_DEBIAN11_ARM64"
        echo "CentOS 8 ARM64: $BUILD_CENTOS8_ARM64"
        echo "Python 版本: $PYTHON_VERSIONS"
        
        matrix_include="["
        first=true
        
        # 将 Python 版本字符串转换为数组
        IFS=',' read -ra VERSIONS <<< "$PYTHON_VERSIONS"
        
        # CentOS 7 x86_64
        if [[ "$BUILD_CENTOS7" == "true" ]]; then
          for version in "${VERSIONS[@]}"; do
            version=$(echo "$version" | xargs)
            if [[ "$first" == "false" ]]; then
              matrix_include+=","
            fi
            matrix_include+="{\"platform\":\"centos7-x64\",\"os\":\"ubuntu-latest\",\"python-version\":\"$version\",\"docker_image\":\"centos:7\",\"setup_script\":\"centos7_setup.sh\"}"
            first=false
          done
        fi
        
        # Debian 11 x86_64
        if [[ "$BUILD_DEBIAN11" == "true" ]]; then
          for version in "${VERSIONS[@]}"; do
            version=$(echo "$version" | xargs)
            if [[ "$first" == "false" ]]; then
              matrix_include+=","
            fi
            matrix_include+="{\"platform\":\"debian11-x64\",\"os\":\"ubuntu-latest\",\"python-version\":\"$version\",\"docker_image\":\"debian:11\",\"setup_script\":\"debian11_setup.sh\"}"
            first=false
          done
        fi
        
        # Windows x86_64
        if [[ "$BUILD_WINDOWS" == "true" ]]; then
          for version in "${VERSIONS[@]}"; do
            version=$(echo "$version" | xargs)
            if [[ "$first" == "false" ]]; then
              matrix_include+=","
            fi
            matrix_include+="{\"platform\":\"win11-x64\",\"os\":\"windows-latest\",\"python-version\":\"$version\",\"docker_image\":\"\",\"setup_script\":\"\"}"
            first=false
          done
        fi
        
        # Debian 11 ARM64
        if [[ "$BUILD_DEBIAN11_ARM64" == "true" ]]; then
          for version in "${VERSIONS[@]}"; do
            version=$(echo "$version" | xargs)
            if [[ "$first" == "false" ]]; then
              matrix_include+=","
            fi
            matrix_include+="{\"platform\":\"debian11-arm64\",\"os\":\"ubuntu-24.04-arm\",\"python-version\":\"$version\",\"docker_image\":\"debian:11\",\"setup_script\":\"debian11_arm64_setup.sh\"}"
            first=false
          done
        fi
        
        # CentOS 8 ARM64
        if [[ "$BUILD_CENTOS8_ARM64" == "true" ]]; then
          for version in "${VERSIONS[@]}"; do
            version=$(echo "$version" | xargs)
            if [[ "$first" == "false" ]]; then
              matrix_include+=","
            fi
            matrix_include+="{\"platform\":\"centos8-arm64\",\"os\":\"ubuntu-24.04-arm\",\"python-version\":\"$version\",\"docker_image\":\"quay.io/centos/centos:stream8\",\"setup_script\":\"centos8_arm64_setup.sh\"}"
            first=false
          done
        fi
        
        matrix_include+="]"
        matrix_json="{\"include\":$matrix_include}"
        
        echo "生成的矩阵:"
        echo "$matrix_json" | jq '.' || echo "$matrix_json"
        
        echo "matrix=$matrix_json" >> $GITHUB_OUTPUT

  build:
    needs: generate-matrix
    runs-on: ${{ matrix.os }}
    name: Build ${{ matrix.platform }} (Python ${{ matrix.python-version }})
    strategy:
      fail-fast: false
      matrix: ${{ fromJson(needs.generate-matrix.outputs.matrix) }}
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}

    - name: Build Linux platforms with Docker
      if: matrix.os == 'ubuntu-latest' || matrix.os == 'ubuntu-24.04-arm'
      run: |
        echo "构建平台: ${{ matrix.platform }}"
        echo "Docker镜像: ${{ matrix.docker_image }}"
        echo "Python版本: ${{ matrix.python-version }}"
        echo "运行器: ${{ matrix.os }}"
        
        # 创建简化的构建 Dockerfile
        cat > Dockerfile.build << EOF
        FROM ${{ matrix.docker_image }}
        
        # 复制设置脚本并运行
        COPY docker-local/${{ matrix.setup_script }} /setup.sh
        RUN chmod +x /setup.sh && /setup.sh ${{ matrix.python-version }}
        
        # 设置工作目录
        WORKDIR /workspace
        
        # 复制项目文件
        COPY . .
        
        # 构建项目
        RUN set -ex && \
            echo "=== 系统信息 ===" && \
            uname -a && \
            python --version && \
            echo "=== 开始构建 ===" && \
            if [ -f /opt/rh/devtoolset-7/enable ]; then source /opt/rh/devtoolset-7/enable; fi && \
            mkdir -p build && \
            cd build && \
            cmake .. \
              -DCMAKE_BUILD_TYPE=Release \
              -DBUILD_EXECUTABLE=ON \
              -DBUILD_SHARED_LIBS=ON \
              -DPython3_EXECUTABLE=\$(which python) && \
            make -j\$(nproc) && \
            cd .. && \
            if [ -f scripts/compile_nuitka_cross_platform.py ]; then \
              python scripts/compile_nuitka_cross_platform.py; \
            fi && \
            echo "=== 构建完成 ==="
        EOF
        
        # 构建 Docker 镜像（原生架构）
        docker build -f Dockerfile.build -t build-${{ matrix.platform }} .
        
        # 从容器中复制构建产物
        container_id=$(docker create build-${{ matrix.platform }})
        docker cp $container_id:/workspace/bin ./bin-${{ matrix.platform }} || mkdir -p ./bin-${{ matrix.platform }}
        docker cp $container_id:/workspace/lib ./lib-${{ matrix.platform }} || mkdir -p ./lib-${{ matrix.platform }}
        docker cp $container_id:/workspace/include ./include-${{ matrix.platform }} || mkdir -p ./include-${{ matrix.platform }}
        docker rm $container_id
        
        # 整理构建产物
        mkdir -p build-output
        if [ -d ./bin-${{ matrix.platform }} ]; then mv ./bin-${{ matrix.platform }} build-output/bin; fi
        if [ -d ./lib-${{ matrix.platform }} ]; then mv ./lib-${{ matrix.platform }} build-output/lib; fi
        if [ -d ./include-${{ matrix.platform }} ]; then mv ./include-${{ matrix.platform }} build-output/include; fi

    - name: Build Windows platform
      if: matrix.os == 'windows-latest'
      run: |
        echo "构建 Windows 平台: ${{ matrix.platform }}"
        echo "Python版本: ${{ matrix.python-version }}"
        
        # 安装 Chocolatey（如果未安装）
        if (!(Get-Command choco -ErrorAction SilentlyContinue)) {
          Set-ExecutionPolicy Bypass -Scope Process -Force
          [System.Net.ServicePointManager]::SecurityProtocol = [System.Net.ServicePointManager]::SecurityProtocol -bor 3072
          iex ((New-Object System.Net.WebClient).DownloadString('https://community.chocolatey.org/install.ps1'))
        }
        
        # 安装构建工具
        choco install -y cmake
        
        # 安装 MinGW 6.3.0 特定版本（直接下载）
        Write-Host "安装 MinGW 6.3.0..."
        
        # 检查是否已经安装了正确版本
        $gccVersion = ""
        try {
          $gccOutput = & gcc --version 2>$null | Select-Object -First 1
          if ($gccOutput -match "6\.3\.0") {
            Write-Host "✓ MinGW 6.3.0 已安装"
            $gccVersion = "6.3.0"
          }
        } catch {
          Write-Host "未检测到 MinGW 6.3.0"
        }
        
        if ($gccVersion -ne "6.3.0") {
          Write-Host "下载并安装 MinGW-w64 6.3.0..."
          
          # 创建临时目录
          New-Item -ItemType Directory -Force -Path "C:\mingw-temp"
          Set-Location "C:\mingw-temp"
          
          # 下载 MinGW-w64 6.3.0 (i686-win32-dwarf) - 32位版本
          Write-Host "正在下载 MinGW 6.3.0 (32位)..."
          
          # 定义多个下载源（32位版本）
          $downloadUrls = @(
            "https://sourceforge.net/projects/mingw-w64/files/Toolchains%20targetting%20Win32/Personal%20Builds/mingw-builds/6.3.0/threads-win32/dwarf/i686-6.3.0-release-win32-dwarf-rt_v5-rev2.7z/download",
            "https://github.com/niXman/mingw-builds-binaries/releases/download/6.3.0-rt_v5-rev2/i686-6.3.0-release-win32-dwarf-rt_v5-rev2.7z"
          )
          
          $downloadSuccess = $false
          foreach ($url in $downloadUrls) {
            try {
              Write-Host "尝试从: $url"
              Invoke-WebRequest -Uri $url -OutFile "i686-6.3.0-release-win32-dwarf-rt_v5-rev2.7z" -TimeoutSec 300
              
              # 验证下载的文件
              $fileSize = (Get-Item "i686-6.3.0-release-win32-dwarf-rt_v5-rev2.7z").Length
              Write-Host "下载文件大小: $($fileSize / 1MB) MB"
              
              if ($fileSize -gt 1MB) {
                # 检查文件头是否为7z格式
                $fileHeader = Get-Content "i686-6.3.0-release-win32-dwarf-rt_v5-rev2.7z" -Encoding Byte -TotalCount 6
                if ($fileHeader[0] -eq 55 -and $fileHeader[1] -eq 122) {  # "7z" magic number
                  Write-Host "✓ 下载完成，文件格式验证通过"
                  $downloadSuccess = $true
                  break
                } else {
                  Write-Host "❌ 文件格式错误，尝试下一个源..."
                  Remove-Item "i686-6.3.0-release-win32-dwarf-rt_v5-rev2.7z" -Force
                }
              } else {
                Write-Host "❌ 文件太小，可能是错误页面，尝试下一个源..."
                Remove-Item "i686-6.3.0-release-win32-dwarf-rt_v5-rev2.7z" -Force
              }
            } catch {
              Write-Host "❌ 下载失败: $($_.Exception.Message)"
            }
          }
          
          if (-not $downloadSuccess) {
            Write-Host "❌ 所有下载源都失败，使用系统现有的MinGW"
            Write-Host "MinGW 版本信息:"
            try { gcc --version } catch { Write-Host "gcc 不可用" }
            $env:PATH = "C:\tools\mingw64\bin;C:\msys64\mingw64\bin;$env:PATH"
          } else {
            # 安装 7-Zip 用于解压
            if (!(Get-Command 7z -ErrorAction SilentlyContinue)) {
              Write-Host "安装 7-Zip..."
              choco install -y 7zip
              # 刷新环境变量
              $env:PATH = "$env:PATH;C:\Program Files\7-Zip"
            }
            
            # 解压到 C:\mingw-6.3.0
            Write-Host "解压 MinGW 6.3.0..."
            try {
              & 7z x "i686-6.3.0-release-win32-dwarf-rt_v5-rev2.7z" -o"C:\" -y
              
              # 重命名目录（如果需要）
              # 32位版本的目录结构通常是 i686-6.3.0-release-win32-dwarf-rt_v5-rev2/mingw32
              if (Test-Path "C:\i686-6.3.0-release-win32-dwarf-rt_v5-rev2") {
                if (Test-Path "C:\mingw-6.3.0") {
                  Remove-Item "C:\mingw-6.3.0" -Recurse -Force
                }
                if (Test-Path "C:\i686-6.3.0-release-win32-dwarf-rt_v5-rev2\mingw32") {
                  Move-Item "C:\i686-6.3.0-release-win32-dwarf-rt_v5-rev2\mingw32" "C:\mingw-6.3.0"
                } else {
                  Rename-Item "C:\i686-6.3.0-release-win32-dwarf-rt_v5-rev2" "C:\mingw-6.3.0"
                }
                Write-Host "✓ MinGW 6.3.0 (32位) 解压并重命名完成"
              } elseif (Test-Path "C:\mingw32") {
                if (Test-Path "C:\mingw-6.3.0") {
                  Remove-Item "C:\mingw-6.3.0" -Recurse -Force
                }
                Rename-Item "C:\mingw32" "C:\mingw-6.3.0"
                Write-Host "✓ MinGW 6.3.0 (32位) 解压并重命名完成"
              } else {
                Write-Host "❌ 解压后未找到预期的目录结构"
                Get-ChildItem "C:\" | Where-Object { $_.Name -like "*mingw*" -or $_.Name -like "*6.3.0*" -or $_.Name -like "*i686*" }
              }
            } catch {
              Write-Host "❌ 解压失败: $($_.Exception.Message)"
              Write-Host "使用系统现有的MinGW"
            }
            
            # 清理临时文件
            Set-Location "C:\"
            Remove-Item "C:\mingw-temp" -Recurse -Force -ErrorAction SilentlyContinue
          }
        }
        
        # 确保正确的 MinGW 在 PATH 中
        $mingwPaths = @(
          "C:\mingw-6.3.0\bin",
          "C:\tools\mingw64\bin",
          "C:\msys64\mingw64\bin"
        )
        
        foreach ($path in $mingwPaths) {
          if (Test-Path $path) {
            $env:PATH = "$path;$env:PATH"
            Write-Host "使用 MinGW 路径: $path"
            break
          }
        }
        
        Write-Host "最终 MinGW 版本信息:"
        try {
          gcc --version
          g++ --version
          Write-Host "✓ gcc/g++ 可用"
          
          # 检查是否为32位版本
          $gccTarget = & gcc -dumpmachine
          Write-Host "GCC 目标平台: $gccTarget"
          
          if ($gccTarget -like "*i686*" -or $gccTarget -like "*i386*") {
            Write-Host "✓ 确认使用32位MinGW编译器"
          } else {
            Write-Host "⚠️ 警告：可能未使用32位编译器，目标平台: $gccTarget"
          }
        } catch {
          Write-Host "❌ gcc 不可用"
          # 显示PATH以便调试
          Write-Host "当前 PATH: $env:PATH"
        }
        
        # 安装 Python 依赖
        python -m pip install --upgrade pip
        python -m pip install nuitka wheel setuptools
        
        # 安装 NumPy 和 SciPy
        if ("${{ matrix.python-version }}" -eq "3.8") {
          python -m pip install "numpy>=1.20.0,<2.0.0" scipy
        } else {
          python -m pip install numpy scipy
        }
        
        # 显示系统信息
        Write-Host "=== 系统信息 ==="
        python --version
        Write-Host "Architecture: $env:PROCESSOR_ARCHITECTURE"
        
        # 创建构建目录
        New-Item -ItemType Directory -Force -Path build
        Set-Location build
        
        # 配置 CMake
        $pythonExe = (Get-Command python).Source
        Write-Host "配置 CMake..."
        Write-Host "Python 可执行文件: $pythonExe"
        Write-Host "GCC 路径: $(Get-Command gcc).Source"
        Write-Host "G++ 路径: $(Get-Command g++).Source"
        
        cmake .. `
          -G "MinGW Makefiles" `
          -DCMAKE_BUILD_TYPE=Release `
          -DBUILD_EXECUTABLE=ON `
          -DBUILD_SHARED_LIBS=ON `
          -DPython3_EXECUTABLE="$pythonExe" `
          -DCMAKE_C_COMPILER="gcc" `
          -DCMAKE_CXX_COMPILER="g++"
        
        # 编译
        Write-Host "开始编译..."
        mingw32-make.exe -j4
        
        # 编译 Python 模块
        Set-Location ..
        if (Test-Path "scripts/compile_nuitka_cross_platform.py") {
          python scripts/compile_nuitka_cross_platform.py
        }
        
        # 整理 Windows 构建产物
        New-Item -ItemType Directory -Force -Path build-output
        if (Test-Path "bin") { Move-Item bin build-output/ }
        if (Test-Path "lib") { Move-Item lib build-output/ }
        if (Test-Path "include") { Move-Item include build-output/ }
      shell: pwsh

    - name: Upload build artifacts
      uses: actions/upload-artifact@v4
      with:
        name: bellhop-${{ matrix.platform }}-python${{ matrix.python-version }}
        path: |
          build-output/
        retention-days: 30

    - name: Create build info
      run: |
        cat > build-info.txt << EOF
        ==========================================
        BellhopPropagationModel 构建信息
        ==========================================
        平台: ${{ matrix.platform }}
        操作系统: ${{ matrix.os }}
        Python版本: ${{ matrix.python-version }}
        构建时间: $(date)
        
        兼容性说明:
        - ${{ matrix.platform }}: 适用于对应架构的系统
        - 包含所有必要的运行时库
        - Python 模块已通过 Nuitka 编译
        EOF
      shell: bash

    - name: Upload build info
      uses: actions/upload-artifact@v4
      with:
        name: build-info-${{ matrix.platform }}-python${{ matrix.python-version }}
        path: build-info.txt
